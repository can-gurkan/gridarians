<?xml version="1.0" encoding="utf-8"?>
<model version="NetLogo 7.0.0-beta2" snapToGrid="true">
  <code><![CDATA[extensions[cgp fp palette csv py]

globals [
  grid-size
  available-cell-types
  num-balls
  num-walls
  sensing-distance
  time vis tin low

  ticks-per-gen
  mutation-rate
  rebirth-each-gen?

  num-pre-updates
  threshold-pre-cell-death
  threshold-pre-cell-birth
  delta-pre-cell-health

  num-updates
  num-cell-updates
  threshold-cell-death
  threshold-cell-birth
  delta

  threshold-cell-type-inc
  threshold-cell-type-dec
  threshold-cell-dir-inc
  threshold-cell-dir-dec
  init-child-health

  num-body-inputs
  num-body-outputs
  num-body-cols
  num-body-rows
  body-lvlsback

  generations

  ;; llm
  generation-stats
  best-rules
  best-rule-fitness
  error-log
]

breed[gridarians gridarian]
breed[cells cell]
breed[walls wall]
breed[balls ball]

gridarians-own[
  my-score

  ;; llm additions
  ;input ;; observation vector
  body-rule ;; current rule (llm-generated)
  brain-rule
  ;energy ;; current score
  ;lifetime ;; age of the agent (in generations)
  ;food-collected  ;; total food agent gathered
  parent-id ;; who number of parent
  parent-body-rule ;; parent rule
  parent-brain-rule
]

cells-own [
  cell-type
  direction
  health
  id
  is-cutpoint?
]

to init-params
  set-topology false false
  set grid-size 30
  set available-cell-types [2 3 4 5 6]
  set num-balls 10
  set num-walls 10
  set sensing-distance 3

  set ticks-per-gen 1000
  set mutation-rate 0.2
  set rebirth-each-gen? false

  ;; Pre-Birth Params
  set num-pre-updates 6
  set threshold-pre-cell-death -0.6
  set threshold-pre-cell-birth 0.2
  set delta-pre-cell-health 0.2

  ;; Lifetime params
  set num-updates 1
  set num-cell-updates 1
  set threshold-cell-death -0.4
  set threshold-cell-birth 0.2
  set delta 0.1

  set threshold-cell-type-inc 0.5
  set threshold-cell-type-dec -0.5
  set threshold-cell-dir-inc 0.5
  set threshold-cell-dir-dec -0.5
  set init-child-health 0

  ;; Body CGP Parameters
  set num-body-inputs 5
  set num-body-outputs 3
  set num-body-cols 6
  set num-body-rows 3
  set body-lvlsback 2

  set generations 0
end

to setup
  clear-all
  init-params
  resize-grid grid-size
  ;init-custom-robot
  setup-python ;; llm
  init-bodies init-num-agents 0
  setup-random-walls
  setup-random-balls
  visualize-cells
  reset-ticks
end

to resize-grid [n]
  resize-world (-1 * n) n (-1 * n) n
  set-patch-size (11.5 * 50) / (2 * n)
end

to setup-python
  ;; llm
  py:setup py:python
  py:run "import os"
  py:run "import sys"
  py:run "from pathlib import Path"
  ;py:run "sys.path.append(os.path.dirname(os.path.abspath('..')))"
  py:run "from LEAR.src.mutation.mutate_code import mutate_code"
end

to setup-box-walls
  let box-edge max-pxcor - 1
  ask patches with [(abs pxcor = box-edge or abs pycor = box-edge) and
    abs pxcor <= box-edge and abs pycor <= box-edge]
  [ set pcolor gray ]
end

to setup-random-walls
  ask n-of num-walls patches with [not any? turtles-here][
    sprout-walls 1 [
      set shape "square"
      set color grey
    ]
  ]
end

to setup-random-balls
  ask n-of num-balls patches with [not any? turtles-here][
    sprout-balls 1 [
      set shape "circle"
      set color yellow
    ]
  ]
end

;; 1: seed-cell
;; 2: mover
;; 3: rotator
;; 4: sensor
;; 5: compute
;; 6: interact

to init-custom-robot
  create-gridarians 1 [
    let seed-patch patch-at 0 0
    let cell-list [[0 0 1] [-1 -1 2] [1 1 4] [1 2 4]]
    setxy ([pxcor] of seed-patch) ([pycor] of seed-patch)
    set heading 0
    set color white
    ;set hidden? true
    let index 0
    hatch-cells 4[
      set id [who] of myself
      let my-patch patch-at (xcor + item 0 item index cell-list) (xcor + item 1  item index cell-list)
      ;setxy (xcor + item index item 0 cell-list) (xcor + item index item 1 cell-list)
      setxy ([pxcor] of my-patch) ([pycor] of my-patch)
      set cell-type item 2 item index cell-list
      set direction 0
      create-link-from myself [tie hide-link]
      set index index + 1
    ]
    ;embody
  ]
end

to init-body-from-list [lst pos]
  ;; llm
  create-gridarians 1 [
    ;let seed-patch one-of patches with [count turtles-here = 0]
    let seed-patch patch (item 0 pos) (item 1 pos)
    set my-score 0
    move-to seed-patch
    set heading 0
    set color white
    set shape "dot"
    hatch-cells 1 [
      set id [who] of myself
      set cell-type 1
      set direction 0
      set health 1
      set shape "dot"
      create-link-from myself [tie hide-link]
      update-cell-symbol
    ]
    foreach lst [ tuple ->
      let loc patch (item 0 tuple) (item 1 tuple)
      if [available?] of loc [
        hatch-cells 1 [
          move-to loc
          set id [who] of myself
          create-link-from myself [tie hide-link]
          set cell-type item 2 tuple
          let dir item 3 tuple
          if cell-type = 2 [
            set direction item dir [0 90 180 270]
            set shape "arrow2"
          ]
          if cell-type = 3 [
            set direction item dir [90 270]
            ifelse direction = 90 [set shape "clock-wise"][set shape "counter-clock-wise"]
          ]
          if cell-type = 4 [
            set direction item dir [0 90 180 270]
            set shape "T"
          ]
          if cell-type = 5 [
            set direction 0
            set shape "square3"
          ]
          if cell-type = 6 [
            set direction 0
            set shape "x"
          ]
          set heading direction
        ]
      ]
    ]
  ]
  visualize-cells
end

to init-bodies [num parent]
  create-gridarians num [
    let seed-patch one-of patches with [count turtles-here = 0]
    set my-score 0
    move-to seed-patch
    set heading 0
    set color white
    set shape "dot"
    hatch-cells 1 [
      set id [who] of myself
      set cell-type 1
      set direction 0
      set health 1
      set shape "dot"
      create-link-from myself [tie hide-link]
    ]
    ifelse parent = 0 [
      ;(cgp:random-brain <inputs> <outputs> <columsback> <rows> <cols> [0 1 2 3 4])
      (cgp:random-brain num-body-inputs num-body-outputs body-lvlsback num-body-rows num-body-cols [0 5 6 10 12 19])
      ;(cgp:random-brain-n 0 num-body-inputs num-body-outputs body-lvlsback num-body-rows num-body-cols [0 5 6 10 12 19])
    ] [
      cgp:brain-from-parent parent mutation-rate
    ]
    repeat num-pre-updates [
      update-body true
    ]
  ]
end

to update-body [pre?]
  let update-num ifelse-value pre? [max-cells-per-body][num-cell-updates]
  ask up-to-n-of update-num link-neighbors [
    let cell-vars get-cell-vars-list
    ;print cell-vars
    let cell-updates []
    ask myself [set cell-updates cgp:evaluate cell-vars]
    ;print cell-updates
    let update-list decode-cell-updates pre? cell-updates
    ;print update-list
    update-cell-vars update-list
  ]
  cell-death pre?
  cell-birth pre?
end

to-report get-cell-vars-list
  let encoded-type encode-var cell-type (fput 1 available-cell-types)
  let encoded-direction encode-var heading [0 90 180 270]
  let my-id id
  let avg-cell-health mean [health] of cells with [id = my-id]
  let agent-score ([my-score] of myself) / (1 + mean [my-score] of gridarians)
  report (list health encoded-type encoded-direction avg-cell-health agent-score)
end

to-report encode-var [var lst]
  ;; maybe change encoding to be between 0 and 1
  report -1 + (2 / (length lst - 1)) * (item 0 fp:find-indices [x -> x = var] lst)
end

to-report decode-cell-updates [pre? lst]
  ;; [health type direction]
  let h sign (item 0 lst) * ifelse-value pre? [delta-pre-cell-health][delta]
  let t item 1 lst
  ;; experiment with an encoding that can represent any cell type
  set t (ifelse-value t >= threshold-cell-type-inc [1] t <= threshold-cell-type-dec [-1][0])
  let d item 2 lst
  set d (ifelse-value d >= threshold-cell-dir-inc [1] d <= threshold-cell-dir-dec [-1][0])
  report (list h t d)
end

to update-cell-vars [lst]
  set health trunc (health + (item 0 lst))
  let prev-cell-type cell-type
  if cell-type != 1 [set cell-type add-cell-vars cell-type (item 1 lst) available-cell-types]
  if cell-type != prev-cell-type [
    set direction (ifelse-value cell-type = 2 or cell-type = 4 [one-of [0 90 180 270]]
      cell-type = 3 [one-of [90 270]][0])
  ]
  set heading direction
  (ifelse cell-type = 2 or cell-type = 4 [
    set heading add-cell-vars heading ((item 2 lst) * 90) [0 90 180 270]
  ] cell-type = 3 [
    set direction add-cell-vars direction ((item 2 lst) * 180) [90 270]
  ])
  update-cell-symbol
end

to-report add-cell-vars [v i lst]
  if not member? i [-1 0 1 -90 90 -180 180] [print "cell var update error" report false]
  if i = 0 [report v]
  let max-val max lst
  let min-val min lst
  (ifelse (v + i) <= max-val and (v + i) >= min-val [report v + i]
    (v + i) > max-val [report max-val]
    [report min-val])
end

to update-cell-symbol
  if cell-type = 2 [
    set shape "arrow2"
  ]
  if cell-type = 3 [
    ifelse direction = 90 [set shape "clock-wise"][set shape "counter-clock-wise"]
  ]
  if cell-type = 4 [
    set shape "T"
  ]
  if cell-type = 5 [
    set shape "square3"
  ]
  if cell-type = 6 [
    set shape "x"
  ]
end

to cell-death [pre?]
  let death-threshold ifelse-value pre? [threshold-pre-cell-death][threshold-cell-death]
  if any? link-neighbors with [cell-type != 1 and health < death-threshold] [
    let num-deaths count link-neighbors with [cell-type != 1 and health < death-threshold]
    repeat num-deaths [
      let iid [id] of one-of link-neighbors
      find-cutpoints iid
      ask one-of link-neighbors with [cell-type != 1 and health < death-threshold] [
        if not is-cutpoint? [die]
      ]
    ]
  ]
end

to cell-birth2 [pre?]
  let birth-threshold ifelse-value pre? [threshold-pre-cell-birth][threshold-cell-birth]
  if any? link-neighbors with [health > birth-threshold] and count link-neighbors <= max-cells-per-body [
    let num-births count link-neighbors with [health > birth-threshold]
    repeat num-births [
      let possible-locs patch-set [neighbors4 with [count turtles-here = 0]] of link-neighbors
      set possible-locs possible-locs with [available?]
      if any? possible-locs and count link-neighbors <= max-cells-per-body [
        let loc one-of possible-locs
        hatch-cells 1 [
          move-to loc
          set id [who] of myself
          create-link-from myself [tie hide-link]
          set health init-child-health
          set cell-type one-of available-cell-types
          set direction (ifelse-value cell-type = 2 or cell-type = 4 [one-of [0 90 180 270]]
            cell-type = 3 [one-of [90 270]]
            [0])
          set heading direction
          update-cell-symbol
        ]
      ]
    ]
  ]
end

to cell-birth [pre?]
  let birth-threshold ifelse-value pre? [threshold-pre-cell-birth][threshold-cell-birth]
  if any? link-neighbors with [health > birth-threshold] and count link-neighbors <= max-cells-per-body [
    foreach sort link-neighbors with [health > birth-threshold] [ parent-cell ->
      if parent-cell != nobody and count link-neighbors <= max-cells-per-body [
        let possible-locs patch-set [neighbors4 with [count turtles-here = 0]] of link-neighbors
        set possible-locs possible-locs with [available?]
        if any? possible-locs [
          ;let loc min-one-of possible-locs [distance parent-cell]
          let loc one-of possible-locs
          hatch-cells 1 [
            move-to loc
            set id [who] of myself
            create-link-from myself [tie hide-link]
            set health init-child-health
            ifelse [cell-type] of parent-cell = 1 [
              ;set health [health] of parent-cell
              set cell-type one-of available-cell-types
              set direction (ifelse-value cell-type = 2 or cell-type = 4 [one-of [0 90 180 270]]
                cell-type = 3 [one-of [90 270]]
                [0])
              set heading direction
            ] [
              ;set health [health] of parent-cell
              set cell-type [cell-type] of parent-cell
              set direction [direction] of parent-cell
              set heading [heading] of parent-cell
            ]
            update-cell-symbol
          ]
        ]
      ]
    ]
  ]
end

to mutate-body [birth-prob death-prob]
  if random-float 1 < birth-prob and count link-neighbors <= max-cells-per-body [
    let possible-locs patch-set [neighbors4 with [count turtles-here = 0]] of link-neighbors
    ;print possible-locs
    set possible-locs possible-locs with [available?]
    if any? possible-locs [
      ;print possible-locs
      let loc one-of possible-locs
      ;print loc
      hatch-cells 1 [
        move-to loc
        set id [who] of myself
        create-link-from myself [tie hide-link]
        set cell-type one-of available-cell-types
        if cell-type = 2 [
          set direction one-of [0 90 180 270]
          set shape "arrow2"
        ]
        if cell-type = 3 [
          set direction one-of [90 270]
          ifelse direction = 90 [set shape "clock-wise"][set shape "counter-clock-wise"]
        ]
        if cell-type = 4 [
          set direction one-of [0 90 180 270]
          set shape "T"
        ]
        if cell-type = 5 [
          set direction 0
          set shape "square3"
        ]
        if cell-type = 6 [
          set direction one-of [0 90 180 270]
          set shape "x"
        ]
        set heading direction
      ]
    ]
  ]
  if random-float 1 < death-prob [
    if any? link-neighbors with [cell-type != 1] [
      let iid [id] of one-of link-neighbors
      find-cutpoints iid
      ask one-of link-neighbors with [cell-type != 1] [
        if not is-cutpoint? [die]
      ]
    ]
  ]
end

to-report available?
  report (ifelse-value
    self = nobody [false]
    count turtles-here > 0 [false]
    [true]
  )
end

to visualize-cells
  ;let color-list [blue green red yellow cyan magenta brown orange lime sky pink]
  let color-list palette:scheme-colors "Qualitative" "Set1" min list 9 (count gridarians)
  ask patches [
    set pcolor black
    if count cells-here = 1 and check-overlap [
      let c one-of cells-here
      (ifelse cell-visualization = "by-cell-type" [
        (ifelse [cell-type] of c = 1 [set pcolor orange]
          [cell-type] of c = 2 [set pcolor green]
          [cell-type] of c = 3 [set pcolor green - 1]
          [cell-type] of c = 4 [set pcolor blue]
          [cell-type] of c = 5 [set pcolor magenta]
          [cell-type] of c = 6 [set pcolor red]
          [set pcolor black])
        ]
        cell-visualization = "by-agent" [
          let cid [id] of c mod (count gridarians) ;change later
          set pcolor item cid color-list
      ])
    ]
  ]
  ifelse visualize-cell-type-symbol? [
    ask cells [set hidden? false]
  ] [
    ask cells [set hidden? true]
    ask gridarians [set hidden? true]
  ]
end

to go
  ask gridarians [
    ;repeat num-updates [update-body false]
    sense
    interact
    ;move-random
    ;move-morph-limited
    move-morph
  ]
  evolve
  replenish-balls
  visualize-cells
  tick
end

to sense
  let obs get-observation-vector
end

to-report get-observation-vector
  let inputs []
  if any? link-neighbors with [cell-type = 4][
    foreach sort link-neighbors with [cell-type = 4] [sensor ->
      ask sensor [set inputs lput get-sensor-input inputs]
    ]
  ]
  ;print inputs
  report inputs
end

;; 0: empty
;; 1: my cell
;; 2: other cell
;; 3: wall
;; 4: ball

to-report get-sensor-input
  let flag? true
  let dist 0
  let input []
  while [flag?][
    set dist dist + 1
    set input list dist 0
    ifelse patch-ahead dist != nobody [
      ask patch-ahead dist [
        if any? turtles-here [
          let i 5
          let my-id 0.1
          if any? cells-here [
            set my-id [id] of one-of cells-here
          ]
          (ifelse any? cells-here with [id = my-id] [set i 1]
            any? cells-here with [id != my-id] [set i 2]
            any? walls-here [set i 3]
            any? balls-here [set i 4]
            [set i 5])
          set input list dist i
          set flag? false
        ]
      ]
    ] [
      set input list dist 3
      ;print dist
      set flag? false
    ]
    if dist >= sensing-distance [set flag? false]
  ]
  report input
end

to interact
  let score 0
  if any? link-neighbors with [cell-type = 6] [
    ask link-neighbors with [cell-type = 6] [
      if any? neighbors4 with [any? balls-here] [
        ask neighbors4 with [any? balls-here] [
          ask balls-here [die]
          set score score + 1
        ]
      ]
    ]
    set my-score my-score + score
  ]
end

to move-random
  let dir one-of [0 45 90 135 180 225 270 315]
  let cw? one-of [true false]
  let rot? ifelse-value random-float 1 < 0.2 [true][false]
  change-pos dir
  if rot? [rotate cw?]
end

to move-morph-limited
  let dir get-pos-dir
  change-pos dir
  let cw? get-rot-dir
  rotate cw?
end

to-report get-pos-dir
  let bool-list [0 0 0 0]
  let dir-list  [0 90 180 270]
  foreach range 4 [i ->
    if any? link-neighbors with [cell-type = 2 and heading = item i dir-list][
      if random-float 1 < 0.5 [
        set bool-list replace-item i bool-list 1
      ]
      ;set bool-list replace-item i bool-list 1
    ]
  ]
  let xv (ifelse-value
    item 1 bool-list = 1 and item 3 bool-list = 0 [1]
    item 1 bool-list = 0 and item 3 bool-list = 1 [-1]
    [0])
  let yv (ifelse-value
    item 0 bool-list = 1 and item 2 bool-list = 0 [1]
    item 0 bool-list = 0 and item 2 bool-list = 1 [-1]
    [0])
  ;print bool-list
  report ifelse-value not (xv = 0 and yv = 0) [atan xv yv] ["stop"]
end

to-report get-rot-dir
  let r? false
  let l? false
  if any? link-neighbors with [cell-type = 3 and direction = 90]  [if random-float 1 < 0.3 [set r? true]]
  if any? link-neighbors with [cell-type = 3 and direction = 270] [if random-float 1 < 0.3 [set l? true]]
  ifelse r? xor l? [
    report ifelse-value r? [true] [false]
  ] [
    report "stop"
  ]
end

to move-morph
  let dirs get-pos-vecs
  ;print dirs
  foreach dirs [d -> change-pos d]
  let rots get-rot-vecs
  ;print rots
  foreach rots [cw? -> rotate cw?]
end

to-report get-pos-vecs
  let vecs []
  let dir-list  [0 90 180 270]
  foreach dir-list [d ->
    if any? link-neighbors with [cell-type = 2 and heading = d][
      let n count link-neighbors with [cell-type = 2 and heading = d]
      repeat n [
        if random-float 1 < 0.5 [
          set vecs lput d vecs
        ]
      ]
    ]
  ]
  report ifelse-value empty? vecs [["stop"]][vecs]
end

to-report get-rot-vecs
  let vecs []
  let dir-list [90 270]
  let cw?-list [true false]
  foreach range 2 [i ->
    if any? link-neighbors with [cell-type = 3 and direction = item i dir-list][
      let n count link-neighbors with [cell-type = 3 and direction = item i dir-list]
      repeat n [
        if random-float 1 < 0.3 [
          set vecs lput (item i cw?-list) vecs
        ]
      ]
    ]
  ]
  report ifelse-value empty? vecs [["stop"]][vecs]
end

to change-pos [dir]
  if dir != "stop"[
    if check-pos-change? dir [
      move-to patch-at-heading-and-distance dir 1
    ]
  ]
end

to rotate [cw?]
  if cw? != "stop" [
    if check-rotate? xcor ycor cw? [
      ifelse cw? [ rt 90 ] [ lt 90 ]
    ]
  ]
end

to-report check-pos-change? [dir]
  let flag true
  ask link-neighbors [
    let patch-to-check patch-at-heading-and-distance dir 1
    if not check-patch? patch-to-check [ set flag false ]
  ]
  report flag
end

to-report check-rotate? [x0 y0 cw?]
  let flag true
  ask link-neighbors [
    let patch-to-check ifelse-value cw? [
      patch (x0 - y0 + ycor) (y0 + x0 - xcor)
    ] [
      patch (x0 + y0 - ycor) (y0 - x0 + xcor)
    ]
    if not check-patch? patch-to-check [ set flag false ]
  ]
  report flag
end

to-report check-patch? [next-patch]
  let my-id id
  report (ifelse-value
    next-patch = nobody [false]
    ([count cells-here with [id != my-id ]] of next-patch >= 1) or
    ([any? walls-here] of next-patch) or
    ([any? balls-here] of next-patch) [false]
    [true]
  )
end

to-report check-overlap
  (ifelse count turtles-here with [breed != cells] > 1 [
    print "overlap error"
    report false
    ]
    count cells-here > 1 [
      print "overlap error"
      report false
    ] [
      report true
    ])
end

to replenish-balls
  if count balls < num-balls [
    let n num-balls - (count balls)
    ask n-of n patches with [not any? turtles-here][
      sprout-balls 1 [
        set shape "circle"
        set color yellow
      ]
    ]
  ]
end

to evolve
  if ticks mod ticks-per-gen = 0 and ticks > 0[
    if rebirth-each-gen? [
      ask gridarians [
        ask link-neighbors with [cell-type != 1][
          die
        ]
        repeat num-pre-updates [update-body true]
      ]
    ]
    ;; kill the lowest fitness agent
    ask min-one-of gridarians [my-score] [
      cgp:clear-brain
      ask link-neighbors [die]
      die
    ]
    ;; produce the offspring of the highest fitness agent
    let parent max-one-of gridarians [my-score]
    init-bodies 1 parent
    ask gridarians [set my-score 0]
    set generations generations + 1
  ]
end

to find-cutpoints [iid]
  ;; Tarjan's algorithm for find articulation points
  ask cells with [id = iid] [set is-cutpoint? false]
  let n count cells with [id = iid]
  set time 0
  set vis map [-> false] range n
  set tin map [-> -1] range n
  set low map [-> -1] range n
  foreach range n [i ->
    if not (item i vis) [
      dfs iid i -1
    ]
  ]
end

to dfs [iid v p]
  ;; Depth-First-Search Tree algorithm
  set vis replace-item v vis true
  set time time + 1
  set tin replace-item v tin time
  set low replace-item v low time
  let children 0
  foreach adj iid v [ti ->
    if ti != p [
      ifelse item ti vis [
        set low replace-item v low (min list (item v low) (item ti tin))
      ] [
        dfs iid ti v
        set low replace-item v low (min list (item v low) (item ti low))
        if item ti low >= item v tin and p != -1 [
          ask get-vertex iid v [
            set is-cutpoint? true
          ]
        ]
        set children children + 1
      ]
    ]
  ]
  if p = -1 and children > 1 [
    ask get-vertex iid v [
      set is-cutpoint? true
    ]
  ]
end

to-report adj [iid i]
  ;; Returns adjacency list
  let tlist sort cells with [id = iid]
  let v item i tlist
  let pn [neighbors4] of v
  let alist []
  let wlist []
  ask pn [
    if any? cells-here with [id = iid] [
      set alist lput (one-of cells-here with [id = iid]) alist
    ]
  ]
  foreach alist [a ->
    set wlist lput (item 0 fp:find-indices [x -> x = a] tlist) wlist
  ]
  report wlist
end

to-report get-vertex [iid i]
  ;; Returns cell from vertex number
  report item i sort cells with [id = iid]
end

to-report trunc [x]
  if x < -1 [set x -1]
  if x > 1 [set x 1]
  report x
end

to-report sign [x]
  report ifelse-value x >= 0 [1][-1]
end

to export-cgps
  let export-list []
  foreach sort gridarians [ g ->
    ask g [
      set export-list lput cgp:get-brain-as-list export-list
    ]
  ]
  print (word "exports/exported-cgps/ex-cgp" date-and-time ".csv")
  csv:to-file (word "exports/exported-cgps/ex-cgp-" remove ":" date-and-time ".csv") export-list
end

to import-cgps
  let file-path "exports/exported-cgps/"
  let file-name "ex-cgp014316.936 AM 25-Apr-2023.csv"
  let import-list csv:from-file (word file-path file-name)
  if-else count gridarians > length import-list [
    print "Error: agent and cgp number mismatch."
  ] [
    let glist sort gridarians
    foreach range length import-list [ i ->
      ask item i glist [
        let cgp-list map read-from-string item i import-list
        cgp:brain-from-list cgp-list
      ]
    ]
  ]
end

to export-world-state
  export-world (word "exports/exported-worlds/exported-world-" remove ":" date-and-time ".csv")
end

to import-world-state
  let file-path "exports/exported-worlds/"
  let file-name "exported-world-013859.918 AM 25-Apr-2023.csv"
  import-world (word file-path file-name)
end

;;; Observables

to-report cell-frequency [t]
  let tot sum [count link-neighbors] of gridarians
  report (sum [count link-neighbors with [cell-type = t]] of gridarians) / tot
end

to test
  ;test-fd-move
  test-change-pos
  test-rotate
  tick
end

to test-change-pos
  ask gridarians [
    ;let dir one-of [0 90 180 270]
    let dir one-of [0 45 90 135 180 225 270 315]
    print check-pos-change? dir
    if check-pos-change? dir [
      move-to patch-at-heading-and-distance dir 1
    ]
  ]
  visualize-cells
end

to test-rotate
  ask gridarians [
    ;setxy (max-pxcor - 1) (min-pycor + 1)
    let dir one-of [true false]
    ;let dir one-of [0 45 90 135 180 225 270 315]
    print check-rotate? xcor ycor dir
    if check-rotate? xcor ycor dir [
      ifelse dir [ rt 90 ] [ lt 90 ]
    ]
  ]
  visualize-cells
end



to draw-cells
  if mouse-down? [
    ask patch mouse-xcor mouse-ycor [
      set pcolor white
    ]
    display
  ]
end]]></code>
  <widgets>
    <view x="285" wrappingAllowedX="false" y="10" frameRate="15.0" minPycor="-30" height="584" showTickCounter="true" patchSize="9.583333333333334" fontSize="10" wrappingAllowedY="false" width="584" tickCounterLabel="ticks" maxPycor="30" updateMode="1" maxPxcor="30" minPxcor="-30"></view>
    <button x="135" y="184" height="40" disableUntilTicks="true" forever="true" kind="Observer" width="100" display="go">go</button>
    <button x="15" y="184" height="40" disableUntilTicks="false" forever="false" kind="Observer" width="100">setup</button>
    <button x="15" y="361" height="40" disableUntilTicks="false" forever="true" kind="Observer" width="100">draw-cells</button>
    <button x="135" y="361" height="40" disableUntilTicks="false" forever="true" kind="Observer" width="100">test</button>
    <switch x="15" y="239" height="40" on="false" variable="visualize-cell-type-symbol?" width="220" display="visualize-cell-type-symbol?"></switch>
    <chooser x="15" y="286" height="60" variable="cell-visualization" current="0" width="138" display="cell-visualization">
      <choice type="string" value="by-cell-type"></choice>
      <choice type="string" value="by-agent"></choice>
    </chooser>
    <slider x="15" step="1" y="15" max="100" width="160" display="init-num-agents" height="50" min="0" direction="Horizontal" default="5.0" variable="init-num-agents"></slider>
    <slider x="15" step="1" y="72" max="100" width="160" display="max-cells-per-body" height="50" min="0" direction="Horizontal" default="20.0" variable="max-cells-per-body"></slider>
    <monitor x="910" precision="17" y="15" height="60" fontSize="11" width="170" display="Generation">generations</monitor>
    <plot x="910" autoPlotX="true" yMax="1.0" autoPlotY="true" yAxis="Score" y="95" xMin="0.0" height="192" legend="true" xMax="10.0" yMin="0.0" width="395" xAxis="Generations" display="Avg Score per Gen">
      <setup></setup>
      <update></update>
      <pen interval="1.0" mode="0" display="avg score" color="-16777216" legend="true">
        <setup></setup>
        <update>if ticks mod ticks-per-gen = 0 [plot mean [my-score] of gridarians]</update>
      </pen>
      <pen interval="1.0" mode="0" display="max score" color="-2674135" legend="true">
        <setup></setup>
        <update>if ticks mod ticks-per-gen = 0 [plot [my-score] of max-one-of gridarians [my-score]]</update>
      </pen>
    </plot>
    <plot x="910" autoPlotX="true" yMax="1.0" autoPlotY="true" yAxis="Frequency" y="302" xMin="0.0" height="219" legend="true" xMax="10.0" yMin="0.0" width="395" xAxis="Generations" display="Cell-Type Frequency">
      <setup></setup>
      <update></update>
      <pen interval="1.0" mode="0" display="seed-cell" color="-955883" legend="true">
        <setup></setup>
        <update>if ticks mod ticks-per-gen = 0 [plot cell-frequency 1]</update>
      </pen>
      <pen interval="1.0" mode="0" display="mover" color="-10899396" legend="true">
        <setup></setup>
        <update>if ticks mod ticks-per-gen = 0 [plot cell-frequency 2]</update>
      </pen>
      <pen interval="1.0" mode="0" display="rotator" color="-13210332" legend="true">
        <setup></setup>
        <update>if ticks mod ticks-per-gen = 0 [plot cell-frequency 3]</update>
      </pen>
      <pen interval="1.0" mode="0" display="sensor" color="-13345367" legend="true">
        <setup></setup>
        <update>if ticks mod ticks-per-gen = 0 [plot cell-frequency 4]</update>
      </pen>
      <pen interval="1.0" mode="0" display="compute" color="-5825686" legend="true">
        <setup></setup>
        <update>if ticks mod ticks-per-gen = 0 [plot cell-frequency 5]</update>
      </pen>
      <pen interval="1.0" mode="0" display="interact" color="-2674135" legend="true">
        <setup></setup>
        <update>if ticks mod ticks-per-gen = 0 [plot cell-frequency 6]</update>
      </pen>
    </plot>
  </widgets>
  <info></info>
  <turtleShapes>
    <shape name="default" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="5"></point>
        <point x="40" y="250"></point>
        <point x="150" y="205"></point>
        <point x="260" y="250"></point>
      </polygon>
    </shape>
    <shape name="airplane" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="0"></point>
        <point x="135" y="15"></point>
        <point x="120" y="60"></point>
        <point x="120" y="105"></point>
        <point x="15" y="165"></point>
        <point x="15" y="195"></point>
        <point x="120" y="180"></point>
        <point x="135" y="240"></point>
        <point x="105" y="270"></point>
        <point x="120" y="285"></point>
        <point x="150" y="270"></point>
        <point x="180" y="285"></point>
        <point x="210" y="270"></point>
        <point x="165" y="240"></point>
        <point x="180" y="180"></point>
        <point x="285" y="195"></point>
        <point x="285" y="165"></point>
        <point x="180" y="105"></point>
        <point x="180" y="60"></point>
        <point x="165" y="15"></point>
      </polygon>
    </shape>
    <shape name="arrow2" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="15"></point>
        <point x="75" y="105"></point>
        <point x="135" y="105"></point>
        <point x="135" y="270"></point>
        <point x="165" y="270"></point>
        <point x="165" y="105"></point>
        <point x="225" y="105"></point>
      </polygon>
    </shape>
    <shape name="box" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="285"></point>
        <point x="285" y="225"></point>
        <point x="285" y="75"></point>
        <point x="150" y="135"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="135"></point>
        <point x="15" y="75"></point>
        <point x="150" y="15"></point>
        <point x="285" y="75"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="15" y="75"></point>
        <point x="15" y="225"></point>
        <point x="150" y="285"></point>
        <point x="150" y="135"></point>
      </polygon>
      <line endX="150" startY="285" marked="false" color="255" endY="135" startX="150"></line>
      <line endX="15" startY="135" marked="false" color="255" endY="75" startX="150"></line>
      <line endX="285" startY="135" marked="false" color="255" endY="75" startX="150"></line>
    </shape>
    <shape name="bug" rotatable="true" editableColorIndex="0">
      <circle x="96" y="182" marked="true" color="-1920102913" diameter="108" filled="true"></circle>
      <circle x="110" y="127" marked="true" color="-1920102913" diameter="80" filled="true"></circle>
      <circle x="110" y="75" marked="true" color="-1920102913" diameter="80" filled="true"></circle>
      <line endX="80" startY="100" marked="true" color="-1920102913" endY="30" startX="150"></line>
      <line endX="220" startY="100" marked="true" color="-1920102913" endY="30" startX="150"></line>
    </shape>
    <shape name="butterfly" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="165"></point>
        <point x="209" y="199"></point>
        <point x="225" y="225"></point>
        <point x="225" y="255"></point>
        <point x="195" y="270"></point>
        <point x="165" y="255"></point>
        <point x="150" y="240"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="165"></point>
        <point x="89" y="198"></point>
        <point x="75" y="225"></point>
        <point x="75" y="255"></point>
        <point x="105" y="270"></point>
        <point x="135" y="255"></point>
        <point x="150" y="240"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="139" y="148"></point>
        <point x="100" y="105"></point>
        <point x="55" y="90"></point>
        <point x="25" y="90"></point>
        <point x="10" y="105"></point>
        <point x="10" y="135"></point>
        <point x="25" y="180"></point>
        <point x="40" y="195"></point>
        <point x="85" y="194"></point>
        <point x="139" y="163"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="162" y="150"></point>
        <point x="200" y="105"></point>
        <point x="245" y="90"></point>
        <point x="275" y="90"></point>
        <point x="290" y="105"></point>
        <point x="290" y="135"></point>
        <point x="275" y="180"></point>
        <point x="260" y="195"></point>
        <point x="215" y="195"></point>
        <point x="162" y="165"></point>
      </polygon>
      <polygon color="255" filled="true" marked="false">
        <point x="150" y="255"></point>
        <point x="135" y="225"></point>
        <point x="120" y="150"></point>
        <point x="135" y="120"></point>
        <point x="150" y="105"></point>
        <point x="165" y="120"></point>
        <point x="180" y="150"></point>
        <point x="165" y="225"></point>
      </polygon>
      <circle x="135" y="90" marked="false" color="255" diameter="30" filled="true"></circle>
      <line endX="195" startY="105" marked="false" color="255" endY="60" startX="150"></line>
      <line endX="105" startY="105" marked="false" color="255" endY="60" startX="150"></line>
    </shape>
    <shape name="car" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="300" y="180"></point>
        <point x="279" y="164"></point>
        <point x="261" y="144"></point>
        <point x="240" y="135"></point>
        <point x="226" y="132"></point>
        <point x="213" y="106"></point>
        <point x="203" y="84"></point>
        <point x="185" y="63"></point>
        <point x="159" y="50"></point>
        <point x="135" y="50"></point>
        <point x="75" y="60"></point>
        <point x="0" y="150"></point>
        <point x="0" y="165"></point>
        <point x="0" y="225"></point>
        <point x="300" y="225"></point>
        <point x="300" y="180"></point>
      </polygon>
      <circle x="180" y="180" marked="false" color="255" diameter="90" filled="true"></circle>
      <circle x="30" y="180" marked="false" color="255" diameter="90" filled="true"></circle>
      <polygon color="255" filled="true" marked="false">
        <point x="162" y="80"></point>
        <point x="132" y="78"></point>
        <point x="134" y="135"></point>
        <point x="209" y="135"></point>
        <point x="194" y="105"></point>
        <point x="189" y="96"></point>
        <point x="180" y="89"></point>
      </polygon>
      <circle x="47" y="195" marked="true" color="-1920102913" diameter="58" filled="true"></circle>
      <circle x="195" y="195" marked="true" color="-1920102913" diameter="58" filled="true"></circle>
    </shape>
    <shape name="circle" rotatable="false" editableColorIndex="0">
      <circle x="0" y="0" marked="true" color="-1920102913" diameter="300" filled="true"></circle>
    </shape>
    <shape name="circle 2" rotatable="false" editableColorIndex="0">
      <circle x="0" y="0" marked="true" color="-1920102913" diameter="300" filled="true"></circle>
      <circle x="30" y="30" marked="false" color="255" diameter="240" filled="true"></circle>
    </shape>
    <shape name="circuit" rotatable="false" editableColorIndex="0">
      <rectangle endX="30" startY="15" marked="true" color="-1920102913" endY="285" startX="15" filled="true"></rectangle>
      <rectangle endX="285" startY="15" marked="true" color="-1920102913" endY="30" startX="30" filled="true"></rectangle>
      <rectangle endX="285" startY="270" marked="true" color="-1920102913" endY="285" startX="30" filled="true"></rectangle>
      <rectangle endX="285" startY="30" marked="true" color="-1920102913" endY="285" startX="270" filled="true"></rectangle>
      <rectangle endX="104" startY="127" marked="true" color="-1920102913" endY="187" startX="44" filled="true"></rectangle>
      <rectangle endX="187" startY="45" marked="true" color="-1920102913" endY="110" startX="115" filled="true"></rectangle>
      <rectangle endX="250" startY="181" marked="true" color="-1920102913" endY="241" startX="188" filled="true"></rectangle>
      <rectangle endX="162" startY="107" marked="true" color="-1920102913" endY="285" startX="137" filled="true"></rectangle>
      <rectangle endX="86" startY="185" marked="true" color="-1920102913" endY="225" startX="60" filled="true"></rectangle>
      <rectangle endX="138" startY="225" marked="true" color="-1920102913" endY="250" startX="60" filled="true"></rectangle>
      <rectangle endX="231" startY="154" marked="true" color="-1920102913" endY="185" startX="207" filled="true"></rectangle>
      <rectangle endX="273" startY="130" marked="true" color="-1920102913" endY="154" startX="207" filled="true"></rectangle>
    </shape>
    <shape name="circuit2" rotatable="false" editableColorIndex="0">
      <rectangle endX="30" startY="15" marked="true" color="-1920102913" endY="285" startX="15" filled="true"></rectangle>
      <rectangle endX="285" startY="15" marked="true" color="-1920102913" endY="30" startX="30" filled="true"></rectangle>
      <rectangle endX="285" startY="270" marked="true" color="-1920102913" endY="285" startX="30" filled="true"></rectangle>
      <rectangle endX="285" startY="30" marked="true" color="-1920102913" endY="285" startX="270" filled="true"></rectangle>
      <circle x="116" y="71" marked="true" color="-1920102913" diameter="67" filled="true"></circle>
      <circle x="71" y="161" marked="true" color="-1920102913" diameter="67" filled="true"></circle>
      <circle x="161" y="161" marked="true" color="-1920102913" diameter="67" filled="true"></circle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="45" y="270"></point>
        <point x="90" y="210"></point>
        <point x="75" y="210"></point>
        <point x="30" y="270"></point>
        <point x="30" y="270"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="270" y="270"></point>
        <point x="225" y="210"></point>
        <point x="210" y="210"></point>
        <point x="255" y="270"></point>
        <point x="165" y="270"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="141" y="30"></point>
        <point x="141" y="75"></point>
        <point x="156" y="75"></point>
        <point x="156" y="30"></point>
        <point x="141" y="30"></point>
      </polygon>
    </shape>
    <shape name="clock-wise" rotatable="false" editableColorIndex="0">
      <circle x="60" y="60" marked="true" color="-1920102913" diameter="180" filled="false"></circle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="223" y="205"></point>
        <point x="283" y="115"></point>
        <point x="163" y="115"></point>
        <point x="223" y="205"></point>
      </polygon>
    </shape>
    <shape name="counter-clock-wise" rotatable="false" editableColorIndex="0">
      <circle x="60" y="60" marked="true" color="-1920102913" diameter="180" filled="false"></circle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="223" y="93"></point>
        <point x="283" y="183"></point>
        <point x="163" y="183"></point>
        <point x="223" y="93"></point>
      </polygon>
    </shape>
    <shape name="cow" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="200" y="193"></point>
        <point x="197" y="249"></point>
        <point x="179" y="249"></point>
        <point x="177" y="196"></point>
        <point x="166" y="187"></point>
        <point x="140" y="189"></point>
        <point x="93" y="191"></point>
        <point x="78" y="179"></point>
        <point x="72" y="211"></point>
        <point x="49" y="209"></point>
        <point x="48" y="181"></point>
        <point x="37" y="149"></point>
        <point x="25" y="120"></point>
        <point x="25" y="89"></point>
        <point x="45" y="72"></point>
        <point x="103" y="84"></point>
        <point x="179" y="75"></point>
        <point x="198" y="76"></point>
        <point x="252" y="64"></point>
        <point x="272" y="81"></point>
        <point x="293" y="103"></point>
        <point x="285" y="121"></point>
        <point x="255" y="121"></point>
        <point x="242" y="118"></point>
        <point x="224" y="167"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="73" y="210"></point>
        <point x="86" y="251"></point>
        <point x="62" y="249"></point>
        <point x="48" y="208"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="25" y="114"></point>
        <point x="16" y="195"></point>
        <point x="9" y="204"></point>
        <point x="23" y="213"></point>
        <point x="25" y="200"></point>
        <point x="39" y="123"></point>
      </polygon>
    </shape>
    <shape name="cylinder" rotatable="false" editableColorIndex="0">
      <circle x="0" y="0" marked="true" color="-1920102913" diameter="300" filled="true"></circle>
    </shape>
    <shape name="die 1" rotatable="false" editableColorIndex="0">
      <rectangle endX="255" startY="45" marked="true" color="-1920102913" endY="255" startX="45" filled="true"></rectangle>
      <circle x="129" y="129" marked="false" color="255" diameter="42" filled="true"></circle>
    </shape>
    <shape name="dot" rotatable="false" editableColorIndex="0">
      <circle x="90" y="90" marked="true" color="-1920102913" diameter="120" filled="true"></circle>
    </shape>
    <shape name="eyeball" rotatable="false" editableColorIndex="0">
      <circle x="22" y="20" marked="false" color="-1" diameter="248" filled="true"></circle>
      <circle x="83" y="81" marked="true" color="-1920102913" diameter="122" filled="true"></circle>
      <circle x="122" y="120" marked="false" color="255" diameter="44" filled="true"></circle>
    </shape>
    <shape name="eyeball2" rotatable="false" editableColorIndex="0">
      <circle x="32" y="29" marked="false" color="-1" diameter="236" filled="true"></circle>
      <circle x="88" y="85" marked="false" color="764264191" diameter="122" filled="true"></circle>
      <circle x="127" y="124" marked="false" color="255" diameter="44" filled="true"></circle>
    </shape>
    <shape name="face happy" rotatable="false" editableColorIndex="0">
      <circle x="8" y="8" marked="true" color="-1920102913" diameter="285" filled="true"></circle>
      <circle x="60" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <circle x="180" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <polygon color="255" filled="true" marked="false">
        <point x="150" y="255"></point>
        <point x="90" y="239"></point>
        <point x="62" y="213"></point>
        <point x="47" y="191"></point>
        <point x="67" y="179"></point>
        <point x="90" y="203"></point>
        <point x="109" y="218"></point>
        <point x="150" y="225"></point>
        <point x="192" y="218"></point>
        <point x="210" y="203"></point>
        <point x="227" y="181"></point>
        <point x="251" y="194"></point>
        <point x="236" y="217"></point>
        <point x="212" y="240"></point>
      </polygon>
    </shape>
    <shape name="face neutral" rotatable="false" editableColorIndex="0">
      <circle x="8" y="7" marked="true" color="-1920102913" diameter="285" filled="true"></circle>
      <circle x="60" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <circle x="180" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <rectangle endX="240" startY="195" marked="false" color="255" endY="225" startX="60" filled="true"></rectangle>
    </shape>
    <shape name="face sad" rotatable="false" editableColorIndex="0">
      <circle x="8" y="8" marked="true" color="-1920102913" diameter="285" filled="true"></circle>
      <circle x="60" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <circle x="180" y="75" marked="false" color="255" diameter="60" filled="true"></circle>
      <polygon color="255" filled="true" marked="false">
        <point x="150" y="168"></point>
        <point x="90" y="184"></point>
        <point x="62" y="210"></point>
        <point x="47" y="232"></point>
        <point x="67" y="244"></point>
        <point x="90" y="220"></point>
        <point x="109" y="205"></point>
        <point x="150" y="198"></point>
        <point x="192" y="205"></point>
        <point x="210" y="220"></point>
        <point x="227" y="242"></point>
        <point x="251" y="229"></point>
        <point x="236" y="206"></point>
        <point x="212" y="183"></point>
      </polygon>
    </shape>
    <shape name="fish" rotatable="false" editableColorIndex="0">
      <polygon color="-1" filled="true" marked="false">
        <point x="44" y="131"></point>
        <point x="21" y="87"></point>
        <point x="15" y="86"></point>
        <point x="0" y="120"></point>
        <point x="15" y="150"></point>
        <point x="0" y="180"></point>
        <point x="13" y="214"></point>
        <point x="20" y="212"></point>
        <point x="45" y="166"></point>
      </polygon>
      <polygon color="-1" filled="true" marked="false">
        <point x="135" y="195"></point>
        <point x="119" y="235"></point>
        <point x="95" y="218"></point>
        <point x="76" y="210"></point>
        <point x="46" y="204"></point>
        <point x="60" y="165"></point>
      </polygon>
      <polygon color="-1" filled="true" marked="false">
        <point x="75" y="45"></point>
        <point x="83" y="77"></point>
        <point x="71" y="103"></point>
        <point x="86" y="114"></point>
        <point x="166" y="78"></point>
        <point x="135" y="60"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="30" y="136"></point>
        <point x="151" y="77"></point>
        <point x="226" y="81"></point>
        <point x="280" y="119"></point>
        <point x="292" y="146"></point>
        <point x="292" y="160"></point>
        <point x="287" y="170"></point>
        <point x="270" y="195"></point>
        <point x="195" y="210"></point>
        <point x="151" y="212"></point>
        <point x="30" y="166"></point>
      </polygon>
      <circle x="215" y="106" marked="false" color="255" diameter="30" filled="true"></circle>
    </shape>
    <shape name="flag" rotatable="false" editableColorIndex="0">
      <rectangle endX="75" startY="15" marked="true" color="-1920102913" endY="300" startX="60" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="90" y="150"></point>
        <point x="270" y="90"></point>
        <point x="90" y="30"></point>
      </polygon>
      <line endX="90" startY="135" marked="true" color="-1920102913" endY="135" startX="75"></line>
      <line endX="90" startY="45" marked="true" color="-1920102913" endY="45" startX="75"></line>
    </shape>
    <shape name="flower" rotatable="false" editableColorIndex="0">
      <polygon color="1504722175" filled="true" marked="false">
        <point x="135" y="120"></point>
        <point x="165" y="165"></point>
        <point x="180" y="210"></point>
        <point x="180" y="240"></point>
        <point x="150" y="300"></point>
        <point x="165" y="300"></point>
        <point x="195" y="240"></point>
        <point x="195" y="195"></point>
        <point x="165" y="135"></point>
      </polygon>
      <circle x="85" y="132" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="130" y="147" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="192" y="85" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="85" y="40" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="177" y="40" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="177" y="132" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="70" y="85" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="130" y="25" marked="true" color="-1920102913" diameter="38" filled="true"></circle>
      <circle x="96" y="51" marked="true" color="-1920102913" diameter="108" filled="true"></circle>
      <circle x="113" y="68" marked="false" color="255" diameter="74" filled="true"></circle>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="189" y="233"></point>
        <point x="219" y="188"></point>
        <point x="249" y="173"></point>
        <point x="279" y="188"></point>
        <point x="234" y="218"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="180" y="255"></point>
        <point x="150" y="210"></point>
        <point x="105" y="210"></point>
        <point x="75" y="240"></point>
        <point x="135" y="240"></point>
      </polygon>
    </shape>
    <shape name="hex" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="0" y="150"></point>
        <point x="75" y="30"></point>
        <point x="225" y="30"></point>
        <point x="300" y="150"></point>
        <point x="225" y="270"></point>
        <point x="75" y="270"></point>
      </polygon>
    </shape>
    <shape name="house" rotatable="false" editableColorIndex="0">
      <rectangle endX="255" startY="120" marked="true" color="-1920102913" endY="285" startX="45" filled="true"></rectangle>
      <rectangle endX="180" startY="210" marked="false" color="255" endY="285" startX="120" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="15" y="120"></point>
        <point x="150" y="15"></point>
        <point x="285" y="120"></point>
      </polygon>
      <line endX="270" startY="120" marked="false" color="255" endY="120" startX="30"></line>
    </shape>
    <shape name="leaf" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="210"></point>
        <point x="135" y="195"></point>
        <point x="120" y="210"></point>
        <point x="60" y="210"></point>
        <point x="30" y="195"></point>
        <point x="60" y="180"></point>
        <point x="60" y="165"></point>
        <point x="15" y="135"></point>
        <point x="30" y="120"></point>
        <point x="15" y="105"></point>
        <point x="40" y="104"></point>
        <point x="45" y="90"></point>
        <point x="60" y="90"></point>
        <point x="90" y="105"></point>
        <point x="105" y="120"></point>
        <point x="120" y="120"></point>
        <point x="105" y="60"></point>
        <point x="120" y="60"></point>
        <point x="135" y="30"></point>
        <point x="150" y="15"></point>
        <point x="165" y="30"></point>
        <point x="180" y="60"></point>
        <point x="195" y="60"></point>
        <point x="180" y="120"></point>
        <point x="195" y="120"></point>
        <point x="210" y="105"></point>
        <point x="240" y="90"></point>
        <point x="255" y="90"></point>
        <point x="263" y="104"></point>
        <point x="285" y="105"></point>
        <point x="270" y="120"></point>
        <point x="285" y="135"></point>
        <point x="240" y="165"></point>
        <point x="240" y="180"></point>
        <point x="270" y="195"></point>
        <point x="240" y="210"></point>
        <point x="180" y="210"></point>
        <point x="165" y="195"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="195"></point>
        <point x="135" y="240"></point>
        <point x="120" y="255"></point>
        <point x="105" y="255"></point>
        <point x="105" y="285"></point>
        <point x="135" y="285"></point>
        <point x="165" y="240"></point>
        <point x="165" y="195"></point>
      </polygon>
    </shape>
    <shape name="line" rotatable="true" editableColorIndex="0">
      <line endX="150" startY="0" marked="true" color="-1920102913" endY="300" startX="150"></line>
    </shape>
    <shape name="line half" rotatable="true" editableColorIndex="0">
      <line endX="150" startY="0" marked="true" color="-1920102913" endY="150" startX="150"></line>
    </shape>
    <shape name="orbit 1" rotatable="true" editableColorIndex="0">
      <circle x="116" y="11" marked="true" color="-1920102913" diameter="67" filled="true"></circle>
      <circle x="41" y="41" marked="true" color="-1920102913" diameter="218" filled="false"></circle>
    </shape>
    <shape name="pentagon" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="15"></point>
        <point x="15" y="120"></point>
        <point x="60" y="285"></point>
        <point x="240" y="285"></point>
        <point x="285" y="120"></point>
      </polygon>
    </shape>
    <shape name="person" rotatable="false" editableColorIndex="0">
      <circle x="110" y="5" marked="true" color="-1920102913" diameter="80" filled="true"></circle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="105" y="90"></point>
        <point x="120" y="195"></point>
        <point x="90" y="285"></point>
        <point x="105" y="300"></point>
        <point x="135" y="300"></point>
        <point x="150" y="225"></point>
        <point x="165" y="300"></point>
        <point x="195" y="300"></point>
        <point x="210" y="285"></point>
        <point x="180" y="195"></point>
        <point x="195" y="90"></point>
      </polygon>
      <rectangle endX="172" startY="79" marked="true" color="-1920102913" endY="94" startX="127" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="195" y="90"></point>
        <point x="240" y="150"></point>
        <point x="225" y="180"></point>
        <point x="165" y="105"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="105" y="90"></point>
        <point x="60" y="150"></point>
        <point x="75" y="180"></point>
        <point x="135" y="105"></point>
      </polygon>
    </shape>
    <shape name="plant" rotatable="false" editableColorIndex="0">
      <rectangle endX="165" startY="90" marked="true" color="-1920102913" endY="300" startX="135" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="255"></point>
        <point x="90" y="210"></point>
        <point x="45" y="195"></point>
        <point x="75" y="255"></point>
        <point x="135" y="285"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="165" y="255"></point>
        <point x="210" y="210"></point>
        <point x="255" y="195"></point>
        <point x="225" y="255"></point>
        <point x="165" y="285"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="180"></point>
        <point x="90" y="135"></point>
        <point x="45" y="120"></point>
        <point x="75" y="180"></point>
        <point x="135" y="210"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="165" y="180"></point>
        <point x="165" y="210"></point>
        <point x="225" y="180"></point>
        <point x="255" y="120"></point>
        <point x="210" y="135"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="105"></point>
        <point x="90" y="60"></point>
        <point x="45" y="45"></point>
        <point x="75" y="105"></point>
        <point x="135" y="135"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="165" y="105"></point>
        <point x="165" y="135"></point>
        <point x="225" y="105"></point>
        <point x="255" y="45"></point>
        <point x="210" y="60"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="90"></point>
        <point x="120" y="45"></point>
        <point x="150" y="15"></point>
        <point x="180" y="45"></point>
        <point x="165" y="90"></point>
      </polygon>
    </shape>
    <shape name="reverse-triangle" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="270"></point>
        <point x="15" y="45"></point>
        <point x="285" y="45"></point>
      </polygon>
    </shape>
    <shape name="sensor" rotatable="true" editableColorIndex="0">
      <circle x="0" y="-165" marked="true" color="-1920102913" diameter="300" filled="true"></circle>
      <rectangle endX="165" startY="105" marked="true" color="-1920102913" endY="300" startX="135" filled="true"></rectangle>
    </shape>
    <shape name="sensor2" rotatable="true" editableColorIndex="0">
      <circle x="0" y="-180" marked="true" color="-1920102913" diameter="300" filled="true"></circle>
      <rectangle endX="165" startY="105" marked="true" color="-1920102913" endY="300" startX="135" filled="true"></rectangle>
      <circle x="30" y="-150" marked="false" color="255" diameter="240" filled="true"></circle>
    </shape>
    <shape name="small-arrow" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="75"></point>
        <point x="105" y="150"></point>
        <point x="195" y="150"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="149"></point>
        <point x="135" y="225"></point>
        <point x="139" y="234"></point>
        <point x="147" y="239"></point>
        <point x="154" y="239"></point>
        <point x="161" y="234"></point>
        <point x="165" y="226"></point>
        <point x="165" y="149"></point>
      </polygon>
    </shape>
    <shape name="small-reverse-triangle" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="255"></point>
        <point x="45" y="90"></point>
        <point x="255" y="90"></point>
      </polygon>
    </shape>
    <shape name="spinner" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="0"></point>
        <point x="105" y="75"></point>
        <point x="195" y="75"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="135" y="74"></point>
        <point x="135" y="150"></point>
        <point x="139" y="159"></point>
        <point x="147" y="164"></point>
        <point x="154" y="164"></point>
        <point x="161" y="159"></point>
        <point x="165" y="151"></point>
        <point x="165" y="74"></point>
      </polygon>
    </shape>
    <shape name="square" rotatable="false" editableColorIndex="0">
      <rectangle endX="270" startY="30" marked="true" color="-1920102913" endY="270" startX="30" filled="true"></rectangle>
    </shape>
    <shape name="square 2" rotatable="false" editableColorIndex="0">
      <rectangle endX="270" startY="30" marked="true" color="-1920102913" endY="270" startX="30" filled="true"></rectangle>
      <rectangle endX="240" startY="60" marked="false" color="255" endY="240" startX="60" filled="true"></rectangle>
    </shape>
    <shape name="square-dot" rotatable="false" editableColorIndex="0">
      <circle x="90" y="90" marked="true" color="-1920102913" diameter="120" filled="true"></circle>
      <rectangle endX="30" startY="0" marked="true" color="-1920102913" endY="300" startX="0" filled="true"></rectangle>
      <rectangle endX="300" startY="270" marked="true" color="-1920102913" endY="300" startX="0" filled="true"></rectangle>
      <rectangle endX="300" startY="0" marked="true" color="-1920102913" endY="300" startX="270" filled="true"></rectangle>
      <rectangle endX="300" startY="0" marked="true" color="-1920102913" endY="30" startX="0" filled="true"></rectangle>
    </shape>
    <shape name="square3" rotatable="false" editableColorIndex="0">
      <rectangle endX="30" startY="0" marked="true" color="-1920102913" endY="300" startX="0" filled="true"></rectangle>
      <rectangle endX="300" startY="270" marked="true" color="-1920102913" endY="300" startX="0" filled="true"></rectangle>
      <rectangle endX="300" startY="0" marked="true" color="-1920102913" endY="300" startX="270" filled="true"></rectangle>
      <rectangle endX="300" startY="0" marked="true" color="-1920102913" endY="30" startX="0" filled="true"></rectangle>
    </shape>
    <shape name="star" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="151" y="1"></point>
        <point x="185" y="108"></point>
        <point x="298" y="108"></point>
        <point x="207" y="175"></point>
        <point x="242" y="282"></point>
        <point x="151" y="216"></point>
        <point x="59" y="282"></point>
        <point x="94" y="175"></point>
        <point x="3" y="108"></point>
        <point x="116" y="108"></point>
      </polygon>
    </shape>
    <shape name="t" rotatable="true" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="105"></point>
        <point x="75" y="105"></point>
        <point x="135" y="105"></point>
        <point x="135" y="270"></point>
        <point x="165" y="270"></point>
        <point x="165" y="105"></point>
        <point x="225" y="105"></point>
      </polygon>
      <rectangle endX="240" startY="90" marked="true" color="-1920102913" endY="105" startX="60" filled="true"></rectangle>
    </shape>
    <shape name="target" rotatable="false" editableColorIndex="0">
      <circle x="0" y="0" marked="true" color="-1920102913" diameter="300" filled="true"></circle>
      <circle x="30" y="30" marked="false" color="255" diameter="240" filled="true"></circle>
      <circle x="60" y="60" marked="true" color="-1920102913" diameter="180" filled="true"></circle>
      <circle x="90" y="90" marked="false" color="255" diameter="120" filled="true"></circle>
      <circle x="120" y="120" marked="true" color="-1920102913" diameter="60" filled="true"></circle>
    </shape>
    <shape name="tree" rotatable="false" editableColorIndex="0">
      <circle x="118" y="3" marked="true" color="-1920102913" diameter="94" filled="true"></circle>
      <rectangle endX="180" startY="195" marked="false" color="-1653716737" endY="300" startX="120" filled="true"></rectangle>
      <circle x="65" y="21" marked="true" color="-1920102913" diameter="108" filled="true"></circle>
      <circle x="116" y="41" marked="true" color="-1920102913" diameter="127" filled="true"></circle>
      <circle x="45" y="90" marked="true" color="-1920102913" diameter="120" filled="true"></circle>
      <circle x="104" y="74" marked="true" color="-1920102913" diameter="152" filled="true"></circle>
    </shape>
    <shape name="triangle" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="30"></point>
        <point x="15" y="255"></point>
        <point x="285" y="255"></point>
      </polygon>
    </shape>
    <shape name="triangle 2" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="150" y="30"></point>
        <point x="15" y="255"></point>
        <point x="285" y="255"></point>
      </polygon>
      <polygon color="255" filled="true" marked="false">
        <point x="151" y="99"></point>
        <point x="225" y="223"></point>
        <point x="75" y="224"></point>
      </polygon>
    </shape>
    <shape name="truck" rotatable="false" editableColorIndex="0">
      <rectangle endX="195" startY="45" marked="true" color="-1920102913" endY="187" startX="4" filled="true"></rectangle>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="296" y="193"></point>
        <point x="296" y="150"></point>
        <point x="259" y="134"></point>
        <point x="244" y="104"></point>
        <point x="208" y="104"></point>
        <point x="207" y="194"></point>
      </polygon>
      <rectangle endX="195" startY="60" marked="false" color="-1" endY="105" startX="195" filled="true"></rectangle>
      <polygon color="255" filled="true" marked="false">
        <point x="238" y="112"></point>
        <point x="252" y="141"></point>
        <point x="219" y="141"></point>
        <point x="218" y="112"></point>
      </polygon>
      <circle x="234" y="174" marked="false" color="255" diameter="42" filled="true"></circle>
      <rectangle endX="214" startY="185" marked="true" color="-1920102913" endY="194" startX="181" filled="true"></rectangle>
      <circle x="144" y="174" marked="false" color="255" diameter="42" filled="true"></circle>
      <circle x="24" y="174" marked="false" color="255" diameter="42" filled="true"></circle>
      <circle x="24" y="174" marked="true" color="-1920102913" diameter="42" filled="false"></circle>
      <circle x="144" y="174" marked="true" color="-1920102913" diameter="42" filled="false"></circle>
      <circle x="234" y="174" marked="true" color="-1920102913" diameter="42" filled="false"></circle>
    </shape>
    <shape name="turtle" rotatable="true" editableColorIndex="0">
      <polygon color="1504722175" filled="true" marked="false">
        <point x="215" y="204"></point>
        <point x="240" y="233"></point>
        <point x="246" y="254"></point>
        <point x="228" y="266"></point>
        <point x="215" y="252"></point>
        <point x="193" y="210"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="195" y="90"></point>
        <point x="225" y="75"></point>
        <point x="245" y="75"></point>
        <point x="260" y="89"></point>
        <point x="269" y="108"></point>
        <point x="261" y="124"></point>
        <point x="240" y="105"></point>
        <point x="225" y="105"></point>
        <point x="210" y="105"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="105" y="90"></point>
        <point x="75" y="75"></point>
        <point x="55" y="75"></point>
        <point x="40" y="89"></point>
        <point x="31" y="108"></point>
        <point x="39" y="124"></point>
        <point x="60" y="105"></point>
        <point x="75" y="105"></point>
        <point x="90" y="105"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="132" y="85"></point>
        <point x="134" y="64"></point>
        <point x="107" y="51"></point>
        <point x="108" y="17"></point>
        <point x="150" y="2"></point>
        <point x="192" y="18"></point>
        <point x="192" y="52"></point>
        <point x="169" y="65"></point>
        <point x="172" y="87"></point>
      </polygon>
      <polygon color="1504722175" filled="true" marked="false">
        <point x="85" y="204"></point>
        <point x="60" y="233"></point>
        <point x="54" y="254"></point>
        <point x="72" y="266"></point>
        <point x="85" y="252"></point>
        <point x="107" y="210"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="119" y="75"></point>
        <point x="179" y="75"></point>
        <point x="209" y="101"></point>
        <point x="224" y="135"></point>
        <point x="220" y="225"></point>
        <point x="175" y="261"></point>
        <point x="128" y="261"></point>
        <point x="81" y="224"></point>
        <point x="74" y="135"></point>
        <point x="88" y="99"></point>
      </polygon>
    </shape>
    <shape name="wheel" rotatable="false" editableColorIndex="0">
      <circle x="3" y="3" marked="true" color="-1920102913" diameter="294" filled="true"></circle>
      <circle x="30" y="30" marked="false" color="255" diameter="240" filled="true"></circle>
      <line endX="150" startY="285" marked="true" color="-1920102913" endY="15" startX="150"></line>
      <line endX="285" startY="150" marked="true" color="-1920102913" endY="150" startX="15"></line>
      <circle x="120" y="120" marked="true" color="-1920102913" diameter="60" filled="true"></circle>
      <line endX="79" startY="40" marked="true" color="-1920102913" endY="269" startX="216"></line>
      <line endX="269" startY="84" marked="true" color="-1920102913" endY="221" startX="40"></line>
      <line endX="269" startY="216" marked="true" color="-1920102913" endY="79" startX="40"></line>
      <line endX="221" startY="40" marked="true" color="-1920102913" endY="269" startX="84"></line>
    </shape>
    <shape name="x" rotatable="false" editableColorIndex="0">
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="270" y="75"></point>
        <point x="225" y="30"></point>
        <point x="30" y="225"></point>
        <point x="75" y="270"></point>
      </polygon>
      <polygon color="-1920102913" filled="true" marked="true">
        <point x="30" y="75"></point>
        <point x="75" y="30"></point>
        <point x="270" y="225"></point>
        <point x="225" y="270"></point>
      </polygon>
    </shape>
  </turtleShapes>
  <linkShapes>
    <shape name="default" curviness="0.0">
      <lines>
        <line x="-0.2" visible="false">
          <dash value="0.0"></dash>
          <dash value="1.0"></dash>
        </line>
        <line x="0.0" visible="true">
          <dash value="1.0"></dash>
          <dash value="0.0"></dash>
        </line>
        <line x="0.2" visible="false">
          <dash value="0.0"></dash>
          <dash value="1.0"></dash>
        </line>
      </lines>
      <indicator>
        <shape name="link direction" rotatable="true" editableColorIndex="0">
          <line endX="90" startY="150" marked="true" color="-1920102913" endY="180" startX="150"></line>
          <line endX="210" startY="150" marked="true" color="-1920102913" endY="180" startX="150"></line>
        </shape>
      </indicator>
    </shape>
  </linkShapes>
  <previewCommands>setup-random repeat 20 [ go ]</previewCommands>
</model>
